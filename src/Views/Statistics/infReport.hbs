<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="http://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.0.2/js/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
    <title>Thống kê báo cáo</title>

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            text-align: center;
        }

        h1 {
            color: #333;
        }

        label {
            margin-right: 10px;
            margin-bottom: 10px;
            display: inline-block;
        }

        select,
        input {
            padding: 5px;
            margin-bottom: 10px;
            margin-right: 10px;
        }

        button {
            padding: 8px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-bottom: 10px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th,
        td {
            padding: 12px;
            text-align: center;
            border: 1px solid #ddd;
        }

        th {
            background-color: #4CAF50;
            color: white;
        }

        /* Styles for the modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
            padding-top: 60px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 60%;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            text-align: left;
            border-radius: 8px;
        }

        .close {
            text-align: right;
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /* Highlighted row class */
        .highlighted {
            background-color: #a0e57e;
        }

        .pieChart{
           max-width: 50%; 
    margin: auto;
        }
    </style>

</head>

<body>

    <h1>Thống kê báo cáo</h1>

    <label for="ward">Phường:</label>
    <select id="wardSelect">
        <option value="">Tất Cả Phường</option>
    </select>

    <label for="district">Quận:</label>
    <select id="districtSelect">
        <option value="">Tất Cả Quận</option>
    </select>

    <label for="email">Tìm kiếm:</label>
    <input type="text" id="emailInput" placeholder="Vui lòng nhập email: ">

    <button onclick="filterReports()">Filter</button>

    <canvas id="pieChart" width="100" height="100"></canvas>

    <table border="1" id="reportsTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>Địa chỉ Email</th>
                <th>Phường</th>
                <th>Quận</th>
                <th>Tình trạng</th>
                <th>Cách xử lý</th>
            </tr>
        </thead>
        <tbody id="reportsBody">
            <!-- Reports will be dynamically added here -->
        </tbody>
    </table>

    <!-- Modal for detailed information -->
    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <div id="modalContent"></div>
        </div>
    </div>

    <script>

        toastr.options.closeButton = true;
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-center",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "300",
            "timeOut": "2000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        async function filterReports() {
            const wardSelect = document.getElementById('wardSelect');
            const districtSelect = document.getElementById('districtSelect');
            const txtDisInput = $('#districtSelect');
            const emailInput = document.getElementById('emailInput');

            const wardInput = wardSelect.value;
            const districtInput = districtSelect.value;
            const emailInputValue = emailInput.value.trim();

            let url;

            if (!districtInput && wardInput) {
                toastr.error("Vui lòng chọn quận trước.");
                txtDisInput.addClass('border-danger');
                txtDisInput.removeClass('border-danger');
                txtDisInput.focus();
                return;
            }

            if (wardInput && districtInput && emailInputValue) {
                url = `http://localhost:3500/api/report/getReportByWardAndDisAndEmail/${wardInput}/${districtInput}/${emailInputValue}`;
            } else if (wardInput && districtInput) {
                url = `http://localhost:3500/api/report/getReportByWardAndDis/${wardInput}/${districtInput}`;
            } else if (districtInput) {
                url = `http://localhost:3500/api/report/getReportByDis/${districtInput}`;
            } else if (emailInputValue) {
                url = `http://localhost:3500/api/report/getReportByEmail/${emailInputValue}`;
            } else {
                url = 'http://localhost:3500/api/report/getAllReport';
            }

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.status === 'OK') {
                    displayReports(data.data);
                } else {
                    toastr.error(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        async function displayReports(reports) {
    const reportsBody = document.getElementById('reportsBody');
    reportsBody.innerHTML = '';

    if (reports.length === 0) {
        // If no data, create a single row with a "No data" message
        const noDataRow = document.createElement('tr');
        const noDataCell = document.createElement('td');
        noDataCell.setAttribute('colspan', '6'); // Set colspan to cover all columns
        noDataCell.textContent = 'Không có dữ liệu';
        noDataRow.appendChild(noDataCell);
        reportsBody.appendChild(noDataRow);
    } else {
        // If there is data, create rows for each report
        reports.forEach(report => {
            const row = document.createElement('tr');

            row.innerHTML = `
                <td>${report._id}</td>
                <td>${report.email}</td>
                <td>${report.ward}</td>
                <td>${report.district}</td>
                <td style="color: ${getColorByState(report.state)}">${formatState(report.state)}</td>
                <td style="color: ${getColorByAction(report.actionHandler)}">${report.actionHandler}</td>
            `;

            row.addEventListener('dblclick', () => showDetails(report));
            row.addEventListener('click', () => highlightRow(row));

            reportsBody.appendChild(row);
        });

        const stateCount = { 0: 0, 1: 0, 2: 0 };

        // Count the occurrences of each state
        reports.forEach(report => {
            stateCount[report.state]++;
        });

        // Calculate the data for the pie chart
        const pieChartData = Object.values(stateCount);

        // Get the pie chart canvas and context
        const pieCanvas = document.getElementById('pieChart');
        const pieContext = pieCanvas.getContext('2d');  

        // Destroy the existing chart (if any)
        if (window.myPieChart) {
            window.myPieChart.destroy();
        }

        // Create the pie chart using Chart.js
        window.myPieChart = new Chart(pieContext, {
            type: 'pie',
            data: {
                labels: ['Chưa xử lí', 'Đang xử lí', 'Đã xử lí'],
                datasets: [{
                    data: pieChartData,
                    backgroundColor: ['red', 'gold', 'green'],
                }],
            },
        });
    }
}
        function getColorByState(state) {
            switch (state) {
                case 0:
                    return 'red';
                case 1:
                    return 'gold';
                case 2:
                    return 'green';
                default:
                    return 'black';
            }
        }

        function getColorByAction(actionHandler) {
            switch (actionHandler) {
                case 'Chưa xử lí':
                    return 'red';
                default:
                    return 'green';
            }
        }

        function formatState(state) {
            switch (state) {
                case 0:
                    return 'Chưa xử lí';
                case 1:
                    return 'Đang xử lí';
                case 2:
                    return 'Đã xử lí';
                default:
                    return 'Unknown';
            }
        }

        function showDetails(report) {
            const modal = document.getElementById('detailsModal');
            const modalContent = document.getElementById('modalContent');

            const details = `
        <h2>Report Details</h2>
        <p>ID Panel: ${report.idPanel || 'N/A'}</p>
        <p>Location: [${report.locate.join(', ')}]</p>
        <p>Report Type: ${report.reportType}</p>
        <p>Reporter Information:</p>
        <ul>
            <li>Name: ${report.name}</li>
            <li>Email: ${report.email}</li>
            <li>Phone: ${report.phone}</li>
        </ul>
        <p>Content: ${report.content}</p>
        <p>District: ${report.district}</p>
        <p>Ward: ${report.ward}</p>
        <p>Address: ${report.address}</p>
        <p>Status: ${formatState(report.state)}</p>
        <p>Action: ${report.actionHandler}</p>
    `;

            modalContent.innerHTML = details;
            modal.style.display = 'block';
        }

        function closeModal() {
            const modal = document.getElementById('detailsModal');
            modal.style.display = 'none';
        }

        function highlightRow(row) {
            // Remove highlight from all rows
            const rows = document.querySelectorAll('#reportsBody tr');
            rows.forEach(r => r.classList.remove('highlighted'));

            // Add highlight to the clicked row
            row.classList.add('highlighted');
        }

        async function populateDropdowns() {
            const wardSelect = document.getElementById('wardSelect');
            const districtSelect = document.getElementById('districtSelect');

            try {
                const wardResponse = await fetch('http://localhost:3500/api/ward/getAll-ward');
                const wardData = await wardResponse.json();

                wardData.data.forEach(ward => {
                    const option = document.createElement('option');
                    option.value = ward.wardName;
                    option.textContent = ward.wardName;
                    wardSelect.appendChild(option);
                });

                const districtResponse = await fetch('http://localhost:3500/api/district/getAll-dis');
                const districtData = await districtResponse.json();

                districtData.data.forEach(dis => {
                    const option = document.createElement('option');
                    option.value = dis.disName;
                    option.textContent = dis.disName;
                    districtSelect.appendChild(option);
                });

                filterReports();
            } catch (error) {
                console.error('Error fetching ward and district data:', error);
            }
        }

        async function populateWardsByDistrict() {
            const districtSelect = document.getElementById('districtSelect');
            const wardSelect = document.getElementById('wardSelect');

            // Clear previous options
            wardSelect.innerHTML = '<option value="">Tất Cả Phường</option>';

            const selectedDistrict = districtSelect.value;

            if (selectedDistrict) {
                try {
                    const wardResponse = await fetch(`http://localhost:3500/api/ward/getWard/${selectedDistrict}`);
                    const wardData = await wardResponse.json();

                    wardData.data.forEach(ward => {
                        const option = document.createElement('option');
                        option.value = ward.wardName;
                        option.textContent = ward.wardName;
                        wardSelect.appendChild(option);
                    });

                    filterReports();
                } catch (error) {
                    console.error('Error fetching ward data:', error);
                }
            }
        }

        // Attach the function to the change event of the district dropdown
        document.getElementById('districtSelect').addEventListener('change', populateWardsByDistrict);

        populateDropdowns();
    </script>

</body>

</html>