

    <script>
        toastr.options.closeButton = true;
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-center",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "300",
            "timeOut": "2000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }
        document.addEventListener('DOMContentLoaded', function () {
            // Replace wardId and disId with actual values or variables
            var wardId = document.getElementById('ward').value;
            var disId = document.getElementById('district').value;

            // Fetch wardName
            fetch(`http://localhost:3500/api/ward/getWardById/${wardId}`)
                .then(response => response.json())
                .then(data => {
                    // Assuming the response data structure includes wardName property
                    var wardName = data.data.wardName;

                    // Set the value of the ward input field
                    document.getElementById('ward').value = wardName;
                })
                .catch(error => console.error('Error fetching ward data:', error));

            // Fetch disName
            fetch(`http://localhost:3500/api/district/getDisById/${disId}`)
                .then(response => response.json())
                .then(data => {
                    // Assuming the response data structure includes disName property
                    var disName = data.data.disName;

                    // Set the value of the district input field
                    document.getElementById('district').value = disName;
                })
                .catch(error => console.error('Error fetching district data:', error));
        });

        async function filterReports() {
            const wardSelect = document.getElementById('ward');
            const districtSelect = document.getElementById('district');
            const txtDisInput = $('#districtSelect');
            const emailInput = document.getElementById('emailInput');

            const wardInput = wardSelect.value;
            const districtInput = districtSelect.value;
            const emailInputValue = emailInput.value.trim();

            let url;

            if (wardInput && districtInput && emailInputValue) {
                url = `http://localhost:3500/api/report/getReportByWardAndDisAndEmail/${wardInput}/${districtInput}/${emailInputValue}`;
            } else if (wardInput && districtInput) {
                url = `http://localhost:3500/api/report/getReportByWardAndDis/${wardInput}/${districtInput}`;
            } else if (districtInput) {
                url = `http://localhost:3500/api/report/getReportByDis/${districtInput}`;
            } else if (emailInputValue) {
                url = `http://localhost:3500/api/report/getReportByEmail/${emailInputValue}`;
            } else {
                url = 'http://localhost:3500/api/report/getAllReport';
            }

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.status === 'OK') {
                    displayReports(data.data);
                } else {
                    toastr.error(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }
         function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            const formattedDate = date.toLocaleString(); // Adjust the formatting as needed
            return formattedDate;
        }

        async function displayReports(reports) {
            const reportsBody = document.getElementById('reportsBody');
            reportsBody.innerHTML = '';

            if (reports.length === 0) {
                // If no data, create a single row with a "No data" message
                const noDataRow = document.createElement('tr');
                const noDataCell = document.createElement('td');
                noDataCell.setAttribute('colspan', '9'); // Set colspan to cover all columns
                noDataCell.textContent = 'Không có dữ liệu';
                noDataRow.appendChild(noDataCell);
                reportsBody.appendChild(noDataRow);
            } else {
                // If there is data, create rows for each report
                reports.forEach(report => {
                    const row = document.createElement('tr');

                    row.innerHTML = `
                <td>${formatTimestamp(report.createdAt)}</td>
                <td>${report.email}</td>
                <td data-tooltip="${report.name}">${report.name}</td>
                <td>${report.phone}</td>
                <td>${report.ward}</td>
                <td>${report.district}</td>
                <td data-tooltip="${report.address}">${report.address}</td>
                <td style="color: ${getColorByState(report.state)}">${formatState(report.state)}</td>
                <td style="color: ${getColorByAction(report.actionHandler)}">${report.actionHandler}</td>
            `;

                    row.addEventListener('dblclick', () => showDetails(report));
                    row.addEventListener('click', () => highlightRow(row));

                    reportsBody.appendChild(row);
                });
            }
        }
        function getColorByState(state) {
            switch (state) {
                case 0:
                    return 'red';
                case 1:
                    return 'gold';
                case 2:
                    return 'green';
                default:
                    return 'black';
            }
        }

        function getColorByAction(actionHandler) {
            switch (actionHandler) {
                case 'Chưa xử lí':
                    return 'red';
                default:
                    return 'green';
            }
        }

        function formatState(state) {
            switch (state) {
                case 0:
                    return 'Chưa xử lí';
                case 1:
                    return 'Đang xử lí';
                case 2:
                    return 'Đã xử lí';
                default:
                    return 'Unknown';
            }
        }

        function loadDetails(report) {
            document.getElementById('modalContent').innerHTML = "";

            let imgDivs = "";

            if (report.reportPicture.length === 2) {
                imgDivs += `<img class="img-fluid" src="http://localhost:3500/api/reportImg/getImgReport/${report.reportPicture[0]}"" alt=""><br>
                                        <img class="img-fluid" src="http://localhost:3500/api/reportImg/getImgReport/${report.reportPicture[1]}"" alt=""><br><br>`
            }
            else if (report.reportPicture.length === 1) {
                imgDivs += `<img class="img-fluid" src="http://localhost:3500/api/reportImg/getImgReport/${report.reportPicture[0]}"" alt=""><br><br>`
            }

            const details = `<h6 class="card-subtitle mb-2 text-muted">${report.address}</h6>
                                          <p class="card-text">Họ tên người gửi: <b>${report.name}</b><br>
                                                            Email: <b>${report.email}</b><br>
                                                            Số điện thoại: <b>${report.phone}</b><br>
                                                            Hình thức báo cáo: <b>${report.reportType}</b><br>
                                                            Nội dung: ${report.content}
                                                            Hình ảnh đối tượng báo cáo:<br><br>
                                                            ${imgDivs}
                                                            Tình trạng xử lí: <b style="color:${getColorByState(report.state)}">${formatState(report.state)}</b><br>
                                                            Hình thức xử lí: <b style="color:${getColorByAction(report.actionHandler)}">${report.actionHandler}</b></p>`;

            document.getElementById('modalContent').innerHTML = details;
        }

        function highlightRow(row) {
            // Remove highlight from all rows
            const rows = document.querySelectorAll('#reportsBody tr');
            rows.forEach(r => r.classList.remove('highlighted'));

            // Add highlight to the clicked row
            row.classList.add('highlighted');
        }

       filterReports();
    </script>

</body>

</html>